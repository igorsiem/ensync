/*
 * This file is part of the enSync project, written by Igor Siemienowicz.
 *
 * Copyright (c) 2017 Igor Siemienowicz All rights reserved
 * Distributed under the Boost Software License, Version 1.0 (see
 * http://www.boost.org/LICENSE_1_0.txt).
 */

#include <map>
#include <string>
#include "error.h"
#include "uuid.h"

#ifndef _ensync_compound_type_id_h_included
#define _ensync_compound_type_id_h_included

namespace ensync {

/**
 * \brief Use a UUID to identify compound types
 * 
 * Compound types are generated by the user and identified by a
 * randomly-generated UUID (treated as invariant). Simple map structures are
 * used to track UUIDs against human-readable names (which must also be
 * unique)
 */
using compound_type_id = uuid_t;

using compound_type_store = std::pair<
    std::map<compound_type_id, std::wstring>
    , std::map<std::wstring, compound_type_id> >;

/**
 * \brief Generate a new compound type ID
 * 
 * \param name The human-readable name of the new ID
 * 
 * \param cts The compound type store in which the new type is to be stored
 * 
 * \return The newly-generated compound type ID
 * 
 * \throws
 * single_message_error<message_code_t::duplicate_compound_type_name_err> An
 * ID with the given name already exists in the store
 */
inline compound_type_id generate_new_compound_type_id(
    std::wstring name
    , compound_type_store& cts)
{

    // If we already have this type name, it is an error
    if (cts.second.find(name) != cts.second.end())
        throw single_message_error<
            message_code_t::duplicate_compound_type_name_err>();

    compound_type_id id = make_random_uuid();
    cts.first[id] = name;
    cts.second[name] = id;
    return id;
}   // end generate_new_compound_type_id

}   // end ensync namespace

#endif
